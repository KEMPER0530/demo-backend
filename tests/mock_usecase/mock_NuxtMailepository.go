// Code generated by MockGen. DO NOT EDIT.
// Source: NuxtMailepository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "mailform-demo-backend/src/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNuxtMailRepository is a mock of NuxtMailRepository interface.
type MockNuxtMailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNuxtMailRepositoryMockRecorder
}

// MockNuxtMailRepositoryMockRecorder is the mock recorder for MockNuxtMailRepository.
type MockNuxtMailRepositoryMockRecorder struct {
	mock *MockNuxtMailRepository
}

// NewMockNuxtMailRepository creates a new mock instance.
func NewMockNuxtMailRepository(ctrl *gomock.Controller) *MockNuxtMailRepository {
	mock := &MockNuxtMailRepository{ctrl: ctrl}
	mock.recorder = &MockNuxtMailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNuxtMailRepository) EXPECT() *MockNuxtMailRepositoryMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNuxtMailRepository) Send(arg domain.NuxtMail, region, id, secret string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg, region, id, secret)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockNuxtMailRepositoryMockRecorder) Send(arg, region, id, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNuxtMailRepository)(nil).Send), arg, region, id, secret)
}
