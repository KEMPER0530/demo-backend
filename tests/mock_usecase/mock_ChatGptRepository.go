// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/ChatGptRepository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	domain "github.com/kemper0530/demo-backend/src/domain"
)

// MockChatGptRepository is a mock of ChatGptRepository interface.
type MockChatGptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatGptRepositoryMockRecorder
}

// MockChatGptRepositoryMockRecorder is the mock recorder for MockChatGptRepository.
type MockChatGptRepositoryMockRecorder struct {
	mock *MockChatGptRepository
}

// NewMockChatGptRepository creates a new mock instance.
func NewMockChatGptRepository(ctrl *gomock.Controller) *MockChatGptRepository {
	mock := &MockChatGptRepository{ctrl: ctrl}
	mock.recorder = &MockChatGptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGptRepository) EXPECT() *MockChatGptRepositoryMockRecorder {
	return m.recorder
}

// CreateTableIfNotExists mocks base method.
func (m *MockChatGptRepository) CreateTableIfNotExists(d *dynamo.DB, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableIfNotExists", d, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableIfNotExists indicates an expected call of CreateTableIfNotExists.
func (mr *MockChatGptRepositoryMockRecorder) CreateTableIfNotExists(d, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableIfNotExists", reflect.TypeOf((*MockChatGptRepository)(nil).CreateTableIfNotExists), d, tableName)
}

// PutResult mocks base method.
func (m *MockChatGptRepository) PutResult(table *dynamo.Table, arg domain.ChatGptResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResult", table, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutResult indicates an expected call of PutResult.
func (mr *MockChatGptRepositoryMockRecorder) PutResult(table, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResult", reflect.TypeOf((*MockChatGptRepository)(nil).PutResult), table, arg)
}
